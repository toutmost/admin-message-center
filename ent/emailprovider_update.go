// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toutmost/admin-message-center/ent/emailprovider"
	"github.com/toutmost/admin-message-center/ent/predicate"
)

// EmailProviderUpdate is the builder for updating EmailProvider entities.
type EmailProviderUpdate struct {
	config
	hooks    []Hook
	mutation *EmailProviderMutation
}

// Where appends a list predicates to the EmailProviderUpdate builder.
func (epu *EmailProviderUpdate) Where(ps ...predicate.EmailProvider) *EmailProviderUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetUpdatedAt sets the "updated_at" field.
func (epu *EmailProviderUpdate) SetUpdatedAt(t time.Time) *EmailProviderUpdate {
	epu.mutation.SetUpdatedAt(t)
	return epu
}

// SetName sets the "name" field.
func (epu *EmailProviderUpdate) SetName(s string) *EmailProviderUpdate {
	epu.mutation.SetName(s)
	return epu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (epu *EmailProviderUpdate) SetNillableName(s *string) *EmailProviderUpdate {
	if s != nil {
		epu.SetName(*s)
	}
	return epu
}

// SetAuthType sets the "auth_type" field.
func (epu *EmailProviderUpdate) SetAuthType(u uint8) *EmailProviderUpdate {
	epu.mutation.ResetAuthType()
	epu.mutation.SetAuthType(u)
	return epu
}

// SetNillableAuthType sets the "auth_type" field if the given value is not nil.
func (epu *EmailProviderUpdate) SetNillableAuthType(u *uint8) *EmailProviderUpdate {
	if u != nil {
		epu.SetAuthType(*u)
	}
	return epu
}

// AddAuthType adds u to the "auth_type" field.
func (epu *EmailProviderUpdate) AddAuthType(u int8) *EmailProviderUpdate {
	epu.mutation.AddAuthType(u)
	return epu
}

// SetEmailAddr sets the "email_addr" field.
func (epu *EmailProviderUpdate) SetEmailAddr(s string) *EmailProviderUpdate {
	epu.mutation.SetEmailAddr(s)
	return epu
}

// SetNillableEmailAddr sets the "email_addr" field if the given value is not nil.
func (epu *EmailProviderUpdate) SetNillableEmailAddr(s *string) *EmailProviderUpdate {
	if s != nil {
		epu.SetEmailAddr(*s)
	}
	return epu
}

// SetPassword sets the "password" field.
func (epu *EmailProviderUpdate) SetPassword(s string) *EmailProviderUpdate {
	epu.mutation.SetPassword(s)
	return epu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (epu *EmailProviderUpdate) SetNillablePassword(s *string) *EmailProviderUpdate {
	if s != nil {
		epu.SetPassword(*s)
	}
	return epu
}

// ClearPassword clears the value of the "password" field.
func (epu *EmailProviderUpdate) ClearPassword() *EmailProviderUpdate {
	epu.mutation.ClearPassword()
	return epu
}

// SetHostName sets the "host_name" field.
func (epu *EmailProviderUpdate) SetHostName(s string) *EmailProviderUpdate {
	epu.mutation.SetHostName(s)
	return epu
}

// SetNillableHostName sets the "host_name" field if the given value is not nil.
func (epu *EmailProviderUpdate) SetNillableHostName(s *string) *EmailProviderUpdate {
	if s != nil {
		epu.SetHostName(*s)
	}
	return epu
}

// SetIdentify sets the "identify" field.
func (epu *EmailProviderUpdate) SetIdentify(s string) *EmailProviderUpdate {
	epu.mutation.SetIdentify(s)
	return epu
}

// SetNillableIdentify sets the "identify" field if the given value is not nil.
func (epu *EmailProviderUpdate) SetNillableIdentify(s *string) *EmailProviderUpdate {
	if s != nil {
		epu.SetIdentify(*s)
	}
	return epu
}

// ClearIdentify clears the value of the "identify" field.
func (epu *EmailProviderUpdate) ClearIdentify() *EmailProviderUpdate {
	epu.mutation.ClearIdentify()
	return epu
}

// SetSecret sets the "secret" field.
func (epu *EmailProviderUpdate) SetSecret(s string) *EmailProviderUpdate {
	epu.mutation.SetSecret(s)
	return epu
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (epu *EmailProviderUpdate) SetNillableSecret(s *string) *EmailProviderUpdate {
	if s != nil {
		epu.SetSecret(*s)
	}
	return epu
}

// ClearSecret clears the value of the "secret" field.
func (epu *EmailProviderUpdate) ClearSecret() *EmailProviderUpdate {
	epu.mutation.ClearSecret()
	return epu
}

// SetPort sets the "port" field.
func (epu *EmailProviderUpdate) SetPort(u uint32) *EmailProviderUpdate {
	epu.mutation.ResetPort()
	epu.mutation.SetPort(u)
	return epu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (epu *EmailProviderUpdate) SetNillablePort(u *uint32) *EmailProviderUpdate {
	if u != nil {
		epu.SetPort(*u)
	}
	return epu
}

// AddPort adds u to the "port" field.
func (epu *EmailProviderUpdate) AddPort(u int32) *EmailProviderUpdate {
	epu.mutation.AddPort(u)
	return epu
}

// ClearPort clears the value of the "port" field.
func (epu *EmailProviderUpdate) ClearPort() *EmailProviderUpdate {
	epu.mutation.ClearPort()
	return epu
}

// SetTLS sets the "tls" field.
func (epu *EmailProviderUpdate) SetTLS(b bool) *EmailProviderUpdate {
	epu.mutation.SetTLS(b)
	return epu
}

// SetNillableTLS sets the "tls" field if the given value is not nil.
func (epu *EmailProviderUpdate) SetNillableTLS(b *bool) *EmailProviderUpdate {
	if b != nil {
		epu.SetTLS(*b)
	}
	return epu
}

// SetIsDefault sets the "is_default" field.
func (epu *EmailProviderUpdate) SetIsDefault(b bool) *EmailProviderUpdate {
	epu.mutation.SetIsDefault(b)
	return epu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (epu *EmailProviderUpdate) SetNillableIsDefault(b *bool) *EmailProviderUpdate {
	if b != nil {
		epu.SetIsDefault(*b)
	}
	return epu
}

// Mutation returns the EmailProviderMutation object of the builder.
func (epu *EmailProviderUpdate) Mutation() *EmailProviderMutation {
	return epu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *EmailProviderUpdate) Save(ctx context.Context) (int, error) {
	epu.defaults()
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *EmailProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *EmailProviderUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *EmailProviderUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epu *EmailProviderUpdate) defaults() {
	if _, ok := epu.mutation.UpdatedAt(); !ok {
		v := emailprovider.UpdateDefaultUpdatedAt()
		epu.mutation.SetUpdatedAt(v)
	}
}

func (epu *EmailProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(emailprovider.Table, emailprovider.Columns, sqlgraph.NewFieldSpec(emailprovider.FieldID, field.TypeUint64))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.UpdatedAt(); ok {
		_spec.SetField(emailprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := epu.mutation.Name(); ok {
		_spec.SetField(emailprovider.FieldName, field.TypeString, value)
	}
	if value, ok := epu.mutation.AuthType(); ok {
		_spec.SetField(emailprovider.FieldAuthType, field.TypeUint8, value)
	}
	if value, ok := epu.mutation.AddedAuthType(); ok {
		_spec.AddField(emailprovider.FieldAuthType, field.TypeUint8, value)
	}
	if value, ok := epu.mutation.EmailAddr(); ok {
		_spec.SetField(emailprovider.FieldEmailAddr, field.TypeString, value)
	}
	if value, ok := epu.mutation.Password(); ok {
		_spec.SetField(emailprovider.FieldPassword, field.TypeString, value)
	}
	if epu.mutation.PasswordCleared() {
		_spec.ClearField(emailprovider.FieldPassword, field.TypeString)
	}
	if value, ok := epu.mutation.HostName(); ok {
		_spec.SetField(emailprovider.FieldHostName, field.TypeString, value)
	}
	if value, ok := epu.mutation.Identify(); ok {
		_spec.SetField(emailprovider.FieldIdentify, field.TypeString, value)
	}
	if epu.mutation.IdentifyCleared() {
		_spec.ClearField(emailprovider.FieldIdentify, field.TypeString)
	}
	if value, ok := epu.mutation.Secret(); ok {
		_spec.SetField(emailprovider.FieldSecret, field.TypeString, value)
	}
	if epu.mutation.SecretCleared() {
		_spec.ClearField(emailprovider.FieldSecret, field.TypeString)
	}
	if value, ok := epu.mutation.Port(); ok {
		_spec.SetField(emailprovider.FieldPort, field.TypeUint32, value)
	}
	if value, ok := epu.mutation.AddedPort(); ok {
		_spec.AddField(emailprovider.FieldPort, field.TypeUint32, value)
	}
	if epu.mutation.PortCleared() {
		_spec.ClearField(emailprovider.FieldPort, field.TypeUint32)
	}
	if value, ok := epu.mutation.TLS(); ok {
		_spec.SetField(emailprovider.FieldTLS, field.TypeBool, value)
	}
	if value, ok := epu.mutation.IsDefault(); ok {
		_spec.SetField(emailprovider.FieldIsDefault, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// EmailProviderUpdateOne is the builder for updating a single EmailProvider entity.
type EmailProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailProviderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (epuo *EmailProviderUpdateOne) SetUpdatedAt(t time.Time) *EmailProviderUpdateOne {
	epuo.mutation.SetUpdatedAt(t)
	return epuo
}

// SetName sets the "name" field.
func (epuo *EmailProviderUpdateOne) SetName(s string) *EmailProviderUpdateOne {
	epuo.mutation.SetName(s)
	return epuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (epuo *EmailProviderUpdateOne) SetNillableName(s *string) *EmailProviderUpdateOne {
	if s != nil {
		epuo.SetName(*s)
	}
	return epuo
}

// SetAuthType sets the "auth_type" field.
func (epuo *EmailProviderUpdateOne) SetAuthType(u uint8) *EmailProviderUpdateOne {
	epuo.mutation.ResetAuthType()
	epuo.mutation.SetAuthType(u)
	return epuo
}

// SetNillableAuthType sets the "auth_type" field if the given value is not nil.
func (epuo *EmailProviderUpdateOne) SetNillableAuthType(u *uint8) *EmailProviderUpdateOne {
	if u != nil {
		epuo.SetAuthType(*u)
	}
	return epuo
}

// AddAuthType adds u to the "auth_type" field.
func (epuo *EmailProviderUpdateOne) AddAuthType(u int8) *EmailProviderUpdateOne {
	epuo.mutation.AddAuthType(u)
	return epuo
}

// SetEmailAddr sets the "email_addr" field.
func (epuo *EmailProviderUpdateOne) SetEmailAddr(s string) *EmailProviderUpdateOne {
	epuo.mutation.SetEmailAddr(s)
	return epuo
}

// SetNillableEmailAddr sets the "email_addr" field if the given value is not nil.
func (epuo *EmailProviderUpdateOne) SetNillableEmailAddr(s *string) *EmailProviderUpdateOne {
	if s != nil {
		epuo.SetEmailAddr(*s)
	}
	return epuo
}

// SetPassword sets the "password" field.
func (epuo *EmailProviderUpdateOne) SetPassword(s string) *EmailProviderUpdateOne {
	epuo.mutation.SetPassword(s)
	return epuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (epuo *EmailProviderUpdateOne) SetNillablePassword(s *string) *EmailProviderUpdateOne {
	if s != nil {
		epuo.SetPassword(*s)
	}
	return epuo
}

// ClearPassword clears the value of the "password" field.
func (epuo *EmailProviderUpdateOne) ClearPassword() *EmailProviderUpdateOne {
	epuo.mutation.ClearPassword()
	return epuo
}

// SetHostName sets the "host_name" field.
func (epuo *EmailProviderUpdateOne) SetHostName(s string) *EmailProviderUpdateOne {
	epuo.mutation.SetHostName(s)
	return epuo
}

// SetNillableHostName sets the "host_name" field if the given value is not nil.
func (epuo *EmailProviderUpdateOne) SetNillableHostName(s *string) *EmailProviderUpdateOne {
	if s != nil {
		epuo.SetHostName(*s)
	}
	return epuo
}

// SetIdentify sets the "identify" field.
func (epuo *EmailProviderUpdateOne) SetIdentify(s string) *EmailProviderUpdateOne {
	epuo.mutation.SetIdentify(s)
	return epuo
}

// SetNillableIdentify sets the "identify" field if the given value is not nil.
func (epuo *EmailProviderUpdateOne) SetNillableIdentify(s *string) *EmailProviderUpdateOne {
	if s != nil {
		epuo.SetIdentify(*s)
	}
	return epuo
}

// ClearIdentify clears the value of the "identify" field.
func (epuo *EmailProviderUpdateOne) ClearIdentify() *EmailProviderUpdateOne {
	epuo.mutation.ClearIdentify()
	return epuo
}

// SetSecret sets the "secret" field.
func (epuo *EmailProviderUpdateOne) SetSecret(s string) *EmailProviderUpdateOne {
	epuo.mutation.SetSecret(s)
	return epuo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (epuo *EmailProviderUpdateOne) SetNillableSecret(s *string) *EmailProviderUpdateOne {
	if s != nil {
		epuo.SetSecret(*s)
	}
	return epuo
}

// ClearSecret clears the value of the "secret" field.
func (epuo *EmailProviderUpdateOne) ClearSecret() *EmailProviderUpdateOne {
	epuo.mutation.ClearSecret()
	return epuo
}

// SetPort sets the "port" field.
func (epuo *EmailProviderUpdateOne) SetPort(u uint32) *EmailProviderUpdateOne {
	epuo.mutation.ResetPort()
	epuo.mutation.SetPort(u)
	return epuo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (epuo *EmailProviderUpdateOne) SetNillablePort(u *uint32) *EmailProviderUpdateOne {
	if u != nil {
		epuo.SetPort(*u)
	}
	return epuo
}

// AddPort adds u to the "port" field.
func (epuo *EmailProviderUpdateOne) AddPort(u int32) *EmailProviderUpdateOne {
	epuo.mutation.AddPort(u)
	return epuo
}

// ClearPort clears the value of the "port" field.
func (epuo *EmailProviderUpdateOne) ClearPort() *EmailProviderUpdateOne {
	epuo.mutation.ClearPort()
	return epuo
}

// SetTLS sets the "tls" field.
func (epuo *EmailProviderUpdateOne) SetTLS(b bool) *EmailProviderUpdateOne {
	epuo.mutation.SetTLS(b)
	return epuo
}

// SetNillableTLS sets the "tls" field if the given value is not nil.
func (epuo *EmailProviderUpdateOne) SetNillableTLS(b *bool) *EmailProviderUpdateOne {
	if b != nil {
		epuo.SetTLS(*b)
	}
	return epuo
}

// SetIsDefault sets the "is_default" field.
func (epuo *EmailProviderUpdateOne) SetIsDefault(b bool) *EmailProviderUpdateOne {
	epuo.mutation.SetIsDefault(b)
	return epuo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (epuo *EmailProviderUpdateOne) SetNillableIsDefault(b *bool) *EmailProviderUpdateOne {
	if b != nil {
		epuo.SetIsDefault(*b)
	}
	return epuo
}

// Mutation returns the EmailProviderMutation object of the builder.
func (epuo *EmailProviderUpdateOne) Mutation() *EmailProviderMutation {
	return epuo.mutation
}

// Where appends a list predicates to the EmailProviderUpdate builder.
func (epuo *EmailProviderUpdateOne) Where(ps ...predicate.EmailProvider) *EmailProviderUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *EmailProviderUpdateOne) Select(field string, fields ...string) *EmailProviderUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated EmailProvider entity.
func (epuo *EmailProviderUpdateOne) Save(ctx context.Context) (*EmailProvider, error) {
	epuo.defaults()
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *EmailProviderUpdateOne) SaveX(ctx context.Context) *EmailProvider {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *EmailProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *EmailProviderUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epuo *EmailProviderUpdateOne) defaults() {
	if _, ok := epuo.mutation.UpdatedAt(); !ok {
		v := emailprovider.UpdateDefaultUpdatedAt()
		epuo.mutation.SetUpdatedAt(v)
	}
}

func (epuo *EmailProviderUpdateOne) sqlSave(ctx context.Context) (_node *EmailProvider, err error) {
	_spec := sqlgraph.NewUpdateSpec(emailprovider.Table, emailprovider.Columns, sqlgraph.NewFieldSpec(emailprovider.FieldID, field.TypeUint64))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailprovider.FieldID)
		for _, f := range fields {
			if !emailprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.UpdatedAt(); ok {
		_spec.SetField(emailprovider.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := epuo.mutation.Name(); ok {
		_spec.SetField(emailprovider.FieldName, field.TypeString, value)
	}
	if value, ok := epuo.mutation.AuthType(); ok {
		_spec.SetField(emailprovider.FieldAuthType, field.TypeUint8, value)
	}
	if value, ok := epuo.mutation.AddedAuthType(); ok {
		_spec.AddField(emailprovider.FieldAuthType, field.TypeUint8, value)
	}
	if value, ok := epuo.mutation.EmailAddr(); ok {
		_spec.SetField(emailprovider.FieldEmailAddr, field.TypeString, value)
	}
	if value, ok := epuo.mutation.Password(); ok {
		_spec.SetField(emailprovider.FieldPassword, field.TypeString, value)
	}
	if epuo.mutation.PasswordCleared() {
		_spec.ClearField(emailprovider.FieldPassword, field.TypeString)
	}
	if value, ok := epuo.mutation.HostName(); ok {
		_spec.SetField(emailprovider.FieldHostName, field.TypeString, value)
	}
	if value, ok := epuo.mutation.Identify(); ok {
		_spec.SetField(emailprovider.FieldIdentify, field.TypeString, value)
	}
	if epuo.mutation.IdentifyCleared() {
		_spec.ClearField(emailprovider.FieldIdentify, field.TypeString)
	}
	if value, ok := epuo.mutation.Secret(); ok {
		_spec.SetField(emailprovider.FieldSecret, field.TypeString, value)
	}
	if epuo.mutation.SecretCleared() {
		_spec.ClearField(emailprovider.FieldSecret, field.TypeString)
	}
	if value, ok := epuo.mutation.Port(); ok {
		_spec.SetField(emailprovider.FieldPort, field.TypeUint32, value)
	}
	if value, ok := epuo.mutation.AddedPort(); ok {
		_spec.AddField(emailprovider.FieldPort, field.TypeUint32, value)
	}
	if epuo.mutation.PortCleared() {
		_spec.ClearField(emailprovider.FieldPort, field.TypeUint32)
	}
	if value, ok := epuo.mutation.TLS(); ok {
		_spec.SetField(emailprovider.FieldTLS, field.TypeBool, value)
	}
	if value, ok := epuo.mutation.IsDefault(); ok {
		_spec.SetField(emailprovider.FieldIsDefault, field.TypeBool, value)
	}
	_node = &EmailProvider{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}

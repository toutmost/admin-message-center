// Code generated by ent, DO NOT EDIT.

package emailprovider

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/toutmost/admin-message-center/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldName, v))
}

// AuthType applies equality check predicate on the "auth_type" field. It's identical to AuthTypeEQ.
func AuthType(v uint8) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldAuthType, v))
}

// EmailAddr applies equality check predicate on the "email_addr" field. It's identical to EmailAddrEQ.
func EmailAddr(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldEmailAddr, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldPassword, v))
}

// HostName applies equality check predicate on the "host_name" field. It's identical to HostNameEQ.
func HostName(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldHostName, v))
}

// Identify applies equality check predicate on the "identify" field. It's identical to IdentifyEQ.
func Identify(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldIdentify, v))
}

// Secret applies equality check predicate on the "secret" field. It's identical to SecretEQ.
func Secret(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldSecret, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v uint32) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldPort, v))
}

// TLS applies equality check predicate on the "tls" field. It's identical to TLSEQ.
func TLS(v bool) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldTLS, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldIsDefault, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContainsFold(FieldName, v))
}

// AuthTypeEQ applies the EQ predicate on the "auth_type" field.
func AuthTypeEQ(v uint8) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldAuthType, v))
}

// AuthTypeNEQ applies the NEQ predicate on the "auth_type" field.
func AuthTypeNEQ(v uint8) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldAuthType, v))
}

// AuthTypeIn applies the In predicate on the "auth_type" field.
func AuthTypeIn(vs ...uint8) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldAuthType, vs...))
}

// AuthTypeNotIn applies the NotIn predicate on the "auth_type" field.
func AuthTypeNotIn(vs ...uint8) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldAuthType, vs...))
}

// AuthTypeGT applies the GT predicate on the "auth_type" field.
func AuthTypeGT(v uint8) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldAuthType, v))
}

// AuthTypeGTE applies the GTE predicate on the "auth_type" field.
func AuthTypeGTE(v uint8) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldAuthType, v))
}

// AuthTypeLT applies the LT predicate on the "auth_type" field.
func AuthTypeLT(v uint8) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldAuthType, v))
}

// AuthTypeLTE applies the LTE predicate on the "auth_type" field.
func AuthTypeLTE(v uint8) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldAuthType, v))
}

// EmailAddrEQ applies the EQ predicate on the "email_addr" field.
func EmailAddrEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldEmailAddr, v))
}

// EmailAddrNEQ applies the NEQ predicate on the "email_addr" field.
func EmailAddrNEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldEmailAddr, v))
}

// EmailAddrIn applies the In predicate on the "email_addr" field.
func EmailAddrIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldEmailAddr, vs...))
}

// EmailAddrNotIn applies the NotIn predicate on the "email_addr" field.
func EmailAddrNotIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldEmailAddr, vs...))
}

// EmailAddrGT applies the GT predicate on the "email_addr" field.
func EmailAddrGT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldEmailAddr, v))
}

// EmailAddrGTE applies the GTE predicate on the "email_addr" field.
func EmailAddrGTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldEmailAddr, v))
}

// EmailAddrLT applies the LT predicate on the "email_addr" field.
func EmailAddrLT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldEmailAddr, v))
}

// EmailAddrLTE applies the LTE predicate on the "email_addr" field.
func EmailAddrLTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldEmailAddr, v))
}

// EmailAddrContains applies the Contains predicate on the "email_addr" field.
func EmailAddrContains(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContains(FieldEmailAddr, v))
}

// EmailAddrHasPrefix applies the HasPrefix predicate on the "email_addr" field.
func EmailAddrHasPrefix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasPrefix(FieldEmailAddr, v))
}

// EmailAddrHasSuffix applies the HasSuffix predicate on the "email_addr" field.
func EmailAddrHasSuffix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasSuffix(FieldEmailAddr, v))
}

// EmailAddrEqualFold applies the EqualFold predicate on the "email_addr" field.
func EmailAddrEqualFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEqualFold(FieldEmailAddr, v))
}

// EmailAddrContainsFold applies the ContainsFold predicate on the "email_addr" field.
func EmailAddrContainsFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContainsFold(FieldEmailAddr, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContainsFold(FieldPassword, v))
}

// HostNameEQ applies the EQ predicate on the "host_name" field.
func HostNameEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldHostName, v))
}

// HostNameNEQ applies the NEQ predicate on the "host_name" field.
func HostNameNEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldHostName, v))
}

// HostNameIn applies the In predicate on the "host_name" field.
func HostNameIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldHostName, vs...))
}

// HostNameNotIn applies the NotIn predicate on the "host_name" field.
func HostNameNotIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldHostName, vs...))
}

// HostNameGT applies the GT predicate on the "host_name" field.
func HostNameGT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldHostName, v))
}

// HostNameGTE applies the GTE predicate on the "host_name" field.
func HostNameGTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldHostName, v))
}

// HostNameLT applies the LT predicate on the "host_name" field.
func HostNameLT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldHostName, v))
}

// HostNameLTE applies the LTE predicate on the "host_name" field.
func HostNameLTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldHostName, v))
}

// HostNameContains applies the Contains predicate on the "host_name" field.
func HostNameContains(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContains(FieldHostName, v))
}

// HostNameHasPrefix applies the HasPrefix predicate on the "host_name" field.
func HostNameHasPrefix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasPrefix(FieldHostName, v))
}

// HostNameHasSuffix applies the HasSuffix predicate on the "host_name" field.
func HostNameHasSuffix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasSuffix(FieldHostName, v))
}

// HostNameEqualFold applies the EqualFold predicate on the "host_name" field.
func HostNameEqualFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEqualFold(FieldHostName, v))
}

// HostNameContainsFold applies the ContainsFold predicate on the "host_name" field.
func HostNameContainsFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContainsFold(FieldHostName, v))
}

// IdentifyEQ applies the EQ predicate on the "identify" field.
func IdentifyEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldIdentify, v))
}

// IdentifyNEQ applies the NEQ predicate on the "identify" field.
func IdentifyNEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldIdentify, v))
}

// IdentifyIn applies the In predicate on the "identify" field.
func IdentifyIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldIdentify, vs...))
}

// IdentifyNotIn applies the NotIn predicate on the "identify" field.
func IdentifyNotIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldIdentify, vs...))
}

// IdentifyGT applies the GT predicate on the "identify" field.
func IdentifyGT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldIdentify, v))
}

// IdentifyGTE applies the GTE predicate on the "identify" field.
func IdentifyGTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldIdentify, v))
}

// IdentifyLT applies the LT predicate on the "identify" field.
func IdentifyLT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldIdentify, v))
}

// IdentifyLTE applies the LTE predicate on the "identify" field.
func IdentifyLTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldIdentify, v))
}

// IdentifyContains applies the Contains predicate on the "identify" field.
func IdentifyContains(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContains(FieldIdentify, v))
}

// IdentifyHasPrefix applies the HasPrefix predicate on the "identify" field.
func IdentifyHasPrefix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasPrefix(FieldIdentify, v))
}

// IdentifyHasSuffix applies the HasSuffix predicate on the "identify" field.
func IdentifyHasSuffix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasSuffix(FieldIdentify, v))
}

// IdentifyIsNil applies the IsNil predicate on the "identify" field.
func IdentifyIsNil() predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIsNull(FieldIdentify))
}

// IdentifyNotNil applies the NotNil predicate on the "identify" field.
func IdentifyNotNil() predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotNull(FieldIdentify))
}

// IdentifyEqualFold applies the EqualFold predicate on the "identify" field.
func IdentifyEqualFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEqualFold(FieldIdentify, v))
}

// IdentifyContainsFold applies the ContainsFold predicate on the "identify" field.
func IdentifyContainsFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContainsFold(FieldIdentify, v))
}

// SecretEQ applies the EQ predicate on the "secret" field.
func SecretEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldSecret, v))
}

// SecretNEQ applies the NEQ predicate on the "secret" field.
func SecretNEQ(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldSecret, v))
}

// SecretIn applies the In predicate on the "secret" field.
func SecretIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldSecret, vs...))
}

// SecretNotIn applies the NotIn predicate on the "secret" field.
func SecretNotIn(vs ...string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldSecret, vs...))
}

// SecretGT applies the GT predicate on the "secret" field.
func SecretGT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldSecret, v))
}

// SecretGTE applies the GTE predicate on the "secret" field.
func SecretGTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldSecret, v))
}

// SecretLT applies the LT predicate on the "secret" field.
func SecretLT(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldSecret, v))
}

// SecretLTE applies the LTE predicate on the "secret" field.
func SecretLTE(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldSecret, v))
}

// SecretContains applies the Contains predicate on the "secret" field.
func SecretContains(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContains(FieldSecret, v))
}

// SecretHasPrefix applies the HasPrefix predicate on the "secret" field.
func SecretHasPrefix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasPrefix(FieldSecret, v))
}

// SecretHasSuffix applies the HasSuffix predicate on the "secret" field.
func SecretHasSuffix(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldHasSuffix(FieldSecret, v))
}

// SecretIsNil applies the IsNil predicate on the "secret" field.
func SecretIsNil() predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIsNull(FieldSecret))
}

// SecretNotNil applies the NotNil predicate on the "secret" field.
func SecretNotNil() predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotNull(FieldSecret))
}

// SecretEqualFold applies the EqualFold predicate on the "secret" field.
func SecretEqualFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEqualFold(FieldSecret, v))
}

// SecretContainsFold applies the ContainsFold predicate on the "secret" field.
func SecretContainsFold(v string) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldContainsFold(FieldSecret, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v uint32) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v uint32) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...uint32) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...uint32) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v uint32) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v uint32) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v uint32) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v uint32) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldLTE(FieldPort, v))
}

// PortIsNil applies the IsNil predicate on the "port" field.
func PortIsNil() predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldIsNull(FieldPort))
}

// PortNotNil applies the NotNil predicate on the "port" field.
func PortNotNil() predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNotNull(FieldPort))
}

// TLSEQ applies the EQ predicate on the "tls" field.
func TLSEQ(v bool) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldTLS, v))
}

// TLSNEQ applies the NEQ predicate on the "tls" field.
func TLSNEQ(v bool) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldTLS, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.EmailProvider {
	return predicate.EmailProvider(sql.FieldNEQ(FieldIsDefault, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmailProvider) predicate.EmailProvider {
	return predicate.EmailProvider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmailProvider) predicate.EmailProvider {
	return predicate.EmailProvider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmailProvider) predicate.EmailProvider {
	return predicate.EmailProvider(sql.NotPredicates(p))
}

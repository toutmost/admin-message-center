// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/toutmost/admin-message-center/ent/emaillog"
	"github.com/toutmost/admin-message-center/ent/emailprovider"
	"github.com/toutmost/admin-message-center/ent/predicate"
	"github.com/toutmost/admin-message-center/ent/smslog"
	"github.com/toutmost/admin-message-center/ent/smsprovider"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEmailLog      = "EmailLog"
	TypeEmailProvider = "EmailProvider"
	TypeSmsLog        = "SmsLog"
	TypeSmsProvider   = "SmsProvider"
)

// EmailLogMutation represents an operation that mutates the EmailLog nodes in the graph.
type EmailLogMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *time.Time
	updated_at     *time.Time
	target         *string
	subject        *string
	content        *string
	send_status    *uint8
	addsend_status *int8
	provider       *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*EmailLog, error)
	predicates     []predicate.EmailLog
}

var _ ent.Mutation = (*EmailLogMutation)(nil)

// emaillogOption allows management of the mutation configuration using functional options.
type emaillogOption func(*EmailLogMutation)

// newEmailLogMutation creates new mutation for the EmailLog entity.
func newEmailLogMutation(c config, op Op, opts ...emaillogOption) *EmailLogMutation {
	m := &EmailLogMutation{
		config:        c,
		op:            op,
		typ:           TypeEmailLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmailLogID sets the ID field of the mutation.
func withEmailLogID(id uuid.UUID) emaillogOption {
	return func(m *EmailLogMutation) {
		var (
			err   error
			once  sync.Once
			value *EmailLog
		)
		m.oldValue = func(ctx context.Context) (*EmailLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmailLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmailLog sets the old EmailLog of the mutation.
func withEmailLog(node *EmailLog) emaillogOption {
	return func(m *EmailLogMutation) {
		m.oldValue = func(context.Context) (*EmailLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmailLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmailLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EmailLog entities.
func (m *EmailLogMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmailLogMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmailLogMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EmailLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EmailLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EmailLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EmailLog entity.
// If the EmailLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EmailLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EmailLogMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EmailLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EmailLog entity.
// If the EmailLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EmailLogMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTarget sets the "target" field.
func (m *EmailLogMutation) SetTarget(s string) {
	m.target = &s
}

// Target returns the value of the "target" field in the mutation.
func (m *EmailLogMutation) Target() (r string, exists bool) {
	v := m.target
	if v == nil {
		return
	}
	return *v, true
}

// OldTarget returns the old "target" field's value of the EmailLog entity.
// If the EmailLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailLogMutation) OldTarget(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTarget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTarget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTarget: %w", err)
	}
	return oldValue.Target, nil
}

// ResetTarget resets all changes to the "target" field.
func (m *EmailLogMutation) ResetTarget() {
	m.target = nil
}

// SetSubject sets the "subject" field.
func (m *EmailLogMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *EmailLogMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the EmailLog entity.
// If the EmailLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailLogMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *EmailLogMutation) ResetSubject() {
	m.subject = nil
}

// SetContent sets the "content" field.
func (m *EmailLogMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *EmailLogMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the EmailLog entity.
// If the EmailLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailLogMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *EmailLogMutation) ResetContent() {
	m.content = nil
}

// SetSendStatus sets the "send_status" field.
func (m *EmailLogMutation) SetSendStatus(u uint8) {
	m.send_status = &u
	m.addsend_status = nil
}

// SendStatus returns the value of the "send_status" field in the mutation.
func (m *EmailLogMutation) SendStatus() (r uint8, exists bool) {
	v := m.send_status
	if v == nil {
		return
	}
	return *v, true
}

// OldSendStatus returns the old "send_status" field's value of the EmailLog entity.
// If the EmailLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailLogMutation) OldSendStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSendStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSendStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSendStatus: %w", err)
	}
	return oldValue.SendStatus, nil
}

// AddSendStatus adds u to the "send_status" field.
func (m *EmailLogMutation) AddSendStatus(u int8) {
	if m.addsend_status != nil {
		*m.addsend_status += u
	} else {
		m.addsend_status = &u
	}
}

// AddedSendStatus returns the value that was added to the "send_status" field in this mutation.
func (m *EmailLogMutation) AddedSendStatus() (r int8, exists bool) {
	v := m.addsend_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetSendStatus resets all changes to the "send_status" field.
func (m *EmailLogMutation) ResetSendStatus() {
	m.send_status = nil
	m.addsend_status = nil
}

// SetProvider sets the "provider" field.
func (m *EmailLogMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *EmailLogMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the EmailLog entity.
// If the EmailLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailLogMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ResetProvider resets all changes to the "provider" field.
func (m *EmailLogMutation) ResetProvider() {
	m.provider = nil
}

// Where appends a list predicates to the EmailLogMutation builder.
func (m *EmailLogMutation) Where(ps ...predicate.EmailLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmailLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmailLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EmailLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmailLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmailLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EmailLog).
func (m *EmailLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmailLogMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, emaillog.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, emaillog.FieldUpdatedAt)
	}
	if m.target != nil {
		fields = append(fields, emaillog.FieldTarget)
	}
	if m.subject != nil {
		fields = append(fields, emaillog.FieldSubject)
	}
	if m.content != nil {
		fields = append(fields, emaillog.FieldContent)
	}
	if m.send_status != nil {
		fields = append(fields, emaillog.FieldSendStatus)
	}
	if m.provider != nil {
		fields = append(fields, emaillog.FieldProvider)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmailLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emaillog.FieldCreatedAt:
		return m.CreatedAt()
	case emaillog.FieldUpdatedAt:
		return m.UpdatedAt()
	case emaillog.FieldTarget:
		return m.Target()
	case emaillog.FieldSubject:
		return m.Subject()
	case emaillog.FieldContent:
		return m.Content()
	case emaillog.FieldSendStatus:
		return m.SendStatus()
	case emaillog.FieldProvider:
		return m.Provider()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmailLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emaillog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case emaillog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case emaillog.FieldTarget:
		return m.OldTarget(ctx)
	case emaillog.FieldSubject:
		return m.OldSubject(ctx)
	case emaillog.FieldContent:
		return m.OldContent(ctx)
	case emaillog.FieldSendStatus:
		return m.OldSendStatus(ctx)
	case emaillog.FieldProvider:
		return m.OldProvider(ctx)
	}
	return nil, fmt.Errorf("unknown EmailLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emaillog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case emaillog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case emaillog.FieldTarget:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTarget(v)
		return nil
	case emaillog.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case emaillog.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case emaillog.FieldSendStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSendStatus(v)
		return nil
	case emaillog.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	}
	return fmt.Errorf("unknown EmailLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmailLogMutation) AddedFields() []string {
	var fields []string
	if m.addsend_status != nil {
		fields = append(fields, emaillog.FieldSendStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmailLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case emaillog.FieldSendStatus:
		return m.AddedSendStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case emaillog.FieldSendStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSendStatus(v)
		return nil
	}
	return fmt.Errorf("unknown EmailLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmailLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmailLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmailLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EmailLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmailLogMutation) ResetField(name string) error {
	switch name {
	case emaillog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case emaillog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case emaillog.FieldTarget:
		m.ResetTarget()
		return nil
	case emaillog.FieldSubject:
		m.ResetSubject()
		return nil
	case emaillog.FieldContent:
		m.ResetContent()
		return nil
	case emaillog.FieldSendStatus:
		m.ResetSendStatus()
		return nil
	case emaillog.FieldProvider:
		m.ResetProvider()
		return nil
	}
	return fmt.Errorf("unknown EmailLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmailLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmailLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmailLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmailLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmailLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmailLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmailLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EmailLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmailLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EmailLog edge %s", name)
}

// EmailProviderMutation represents an operation that mutates the EmailProvider nodes in the graph.
type EmailProviderMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	auth_type     *uint8
	addauth_type  *int8
	email_addr    *string
	password      *string
	host_name     *string
	identify      *string
	secret        *string
	port          *uint32
	addport       *int32
	tls           *bool
	is_default    *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EmailProvider, error)
	predicates    []predicate.EmailProvider
}

var _ ent.Mutation = (*EmailProviderMutation)(nil)

// emailproviderOption allows management of the mutation configuration using functional options.
type emailproviderOption func(*EmailProviderMutation)

// newEmailProviderMutation creates new mutation for the EmailProvider entity.
func newEmailProviderMutation(c config, op Op, opts ...emailproviderOption) *EmailProviderMutation {
	m := &EmailProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeEmailProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmailProviderID sets the ID field of the mutation.
func withEmailProviderID(id uint64) emailproviderOption {
	return func(m *EmailProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *EmailProvider
		)
		m.oldValue = func(ctx context.Context) (*EmailProvider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmailProvider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmailProvider sets the old EmailProvider of the mutation.
func withEmailProvider(node *EmailProvider) emailproviderOption {
	return func(m *EmailProviderMutation) {
		m.oldValue = func(context.Context) (*EmailProvider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmailProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmailProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EmailProvider entities.
func (m *EmailProviderMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmailProviderMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmailProviderMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EmailProvider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EmailProviderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EmailProviderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EmailProviderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EmailProviderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EmailProviderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EmailProviderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *EmailProviderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EmailProviderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EmailProviderMutation) ResetName() {
	m.name = nil
}

// SetAuthType sets the "auth_type" field.
func (m *EmailProviderMutation) SetAuthType(u uint8) {
	m.auth_type = &u
	m.addauth_type = nil
}

// AuthType returns the value of the "auth_type" field in the mutation.
func (m *EmailProviderMutation) AuthType() (r uint8, exists bool) {
	v := m.auth_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthType returns the old "auth_type" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldAuthType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthType: %w", err)
	}
	return oldValue.AuthType, nil
}

// AddAuthType adds u to the "auth_type" field.
func (m *EmailProviderMutation) AddAuthType(u int8) {
	if m.addauth_type != nil {
		*m.addauth_type += u
	} else {
		m.addauth_type = &u
	}
}

// AddedAuthType returns the value that was added to the "auth_type" field in this mutation.
func (m *EmailProviderMutation) AddedAuthType() (r int8, exists bool) {
	v := m.addauth_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthType resets all changes to the "auth_type" field.
func (m *EmailProviderMutation) ResetAuthType() {
	m.auth_type = nil
	m.addauth_type = nil
}

// SetEmailAddr sets the "email_addr" field.
func (m *EmailProviderMutation) SetEmailAddr(s string) {
	m.email_addr = &s
}

// EmailAddr returns the value of the "email_addr" field in the mutation.
func (m *EmailProviderMutation) EmailAddr() (r string, exists bool) {
	v := m.email_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailAddr returns the old "email_addr" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldEmailAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailAddr: %w", err)
	}
	return oldValue.EmailAddr, nil
}

// ResetEmailAddr resets all changes to the "email_addr" field.
func (m *EmailProviderMutation) ResetEmailAddr() {
	m.email_addr = nil
}

// SetPassword sets the "password" field.
func (m *EmailProviderMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *EmailProviderMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *EmailProviderMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[emailprovider.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *EmailProviderMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[emailprovider.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *EmailProviderMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, emailprovider.FieldPassword)
}

// SetHostName sets the "host_name" field.
func (m *EmailProviderMutation) SetHostName(s string) {
	m.host_name = &s
}

// HostName returns the value of the "host_name" field in the mutation.
func (m *EmailProviderMutation) HostName() (r string, exists bool) {
	v := m.host_name
	if v == nil {
		return
	}
	return *v, true
}

// OldHostName returns the old "host_name" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldHostName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHostName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHostName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostName: %w", err)
	}
	return oldValue.HostName, nil
}

// ResetHostName resets all changes to the "host_name" field.
func (m *EmailProviderMutation) ResetHostName() {
	m.host_name = nil
}

// SetIdentify sets the "identify" field.
func (m *EmailProviderMutation) SetIdentify(s string) {
	m.identify = &s
}

// Identify returns the value of the "identify" field in the mutation.
func (m *EmailProviderMutation) Identify() (r string, exists bool) {
	v := m.identify
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentify returns the old "identify" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldIdentify(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentify is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentify requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentify: %w", err)
	}
	return oldValue.Identify, nil
}

// ClearIdentify clears the value of the "identify" field.
func (m *EmailProviderMutation) ClearIdentify() {
	m.identify = nil
	m.clearedFields[emailprovider.FieldIdentify] = struct{}{}
}

// IdentifyCleared returns if the "identify" field was cleared in this mutation.
func (m *EmailProviderMutation) IdentifyCleared() bool {
	_, ok := m.clearedFields[emailprovider.FieldIdentify]
	return ok
}

// ResetIdentify resets all changes to the "identify" field.
func (m *EmailProviderMutation) ResetIdentify() {
	m.identify = nil
	delete(m.clearedFields, emailprovider.FieldIdentify)
}

// SetSecret sets the "secret" field.
func (m *EmailProviderMutation) SetSecret(s string) {
	m.secret = &s
}

// Secret returns the value of the "secret" field in the mutation.
func (m *EmailProviderMutation) Secret() (r string, exists bool) {
	v := m.secret
	if v == nil {
		return
	}
	return *v, true
}

// OldSecret returns the old "secret" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecret: %w", err)
	}
	return oldValue.Secret, nil
}

// ClearSecret clears the value of the "secret" field.
func (m *EmailProviderMutation) ClearSecret() {
	m.secret = nil
	m.clearedFields[emailprovider.FieldSecret] = struct{}{}
}

// SecretCleared returns if the "secret" field was cleared in this mutation.
func (m *EmailProviderMutation) SecretCleared() bool {
	_, ok := m.clearedFields[emailprovider.FieldSecret]
	return ok
}

// ResetSecret resets all changes to the "secret" field.
func (m *EmailProviderMutation) ResetSecret() {
	m.secret = nil
	delete(m.clearedFields, emailprovider.FieldSecret)
}

// SetPort sets the "port" field.
func (m *EmailProviderMutation) SetPort(u uint32) {
	m.port = &u
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *EmailProviderMutation) Port() (r uint32, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldPort(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds u to the "port" field.
func (m *EmailProviderMutation) AddPort(u int32) {
	if m.addport != nil {
		*m.addport += u
	} else {
		m.addport = &u
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *EmailProviderMutation) AddedPort() (r int32, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ClearPort clears the value of the "port" field.
func (m *EmailProviderMutation) ClearPort() {
	m.port = nil
	m.addport = nil
	m.clearedFields[emailprovider.FieldPort] = struct{}{}
}

// PortCleared returns if the "port" field was cleared in this mutation.
func (m *EmailProviderMutation) PortCleared() bool {
	_, ok := m.clearedFields[emailprovider.FieldPort]
	return ok
}

// ResetPort resets all changes to the "port" field.
func (m *EmailProviderMutation) ResetPort() {
	m.port = nil
	m.addport = nil
	delete(m.clearedFields, emailprovider.FieldPort)
}

// SetTLS sets the "tls" field.
func (m *EmailProviderMutation) SetTLS(b bool) {
	m.tls = &b
}

// TLS returns the value of the "tls" field in the mutation.
func (m *EmailProviderMutation) TLS() (r bool, exists bool) {
	v := m.tls
	if v == nil {
		return
	}
	return *v, true
}

// OldTLS returns the old "tls" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldTLS(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTLS is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTLS requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTLS: %w", err)
	}
	return oldValue.TLS, nil
}

// ResetTLS resets all changes to the "tls" field.
func (m *EmailProviderMutation) ResetTLS() {
	m.tls = nil
}

// SetIsDefault sets the "is_default" field.
func (m *EmailProviderMutation) SetIsDefault(b bool) {
	m.is_default = &b
}

// IsDefault returns the value of the "is_default" field in the mutation.
func (m *EmailProviderMutation) IsDefault() (r bool, exists bool) {
	v := m.is_default
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDefault returns the old "is_default" field's value of the EmailProvider entity.
// If the EmailProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailProviderMutation) OldIsDefault(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDefault: %w", err)
	}
	return oldValue.IsDefault, nil
}

// ResetIsDefault resets all changes to the "is_default" field.
func (m *EmailProviderMutation) ResetIsDefault() {
	m.is_default = nil
}

// Where appends a list predicates to the EmailProviderMutation builder.
func (m *EmailProviderMutation) Where(ps ...predicate.EmailProvider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmailProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmailProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EmailProvider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmailProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmailProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EmailProvider).
func (m *EmailProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmailProviderMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, emailprovider.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, emailprovider.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, emailprovider.FieldName)
	}
	if m.auth_type != nil {
		fields = append(fields, emailprovider.FieldAuthType)
	}
	if m.email_addr != nil {
		fields = append(fields, emailprovider.FieldEmailAddr)
	}
	if m.password != nil {
		fields = append(fields, emailprovider.FieldPassword)
	}
	if m.host_name != nil {
		fields = append(fields, emailprovider.FieldHostName)
	}
	if m.identify != nil {
		fields = append(fields, emailprovider.FieldIdentify)
	}
	if m.secret != nil {
		fields = append(fields, emailprovider.FieldSecret)
	}
	if m.port != nil {
		fields = append(fields, emailprovider.FieldPort)
	}
	if m.tls != nil {
		fields = append(fields, emailprovider.FieldTLS)
	}
	if m.is_default != nil {
		fields = append(fields, emailprovider.FieldIsDefault)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmailProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emailprovider.FieldCreatedAt:
		return m.CreatedAt()
	case emailprovider.FieldUpdatedAt:
		return m.UpdatedAt()
	case emailprovider.FieldName:
		return m.Name()
	case emailprovider.FieldAuthType:
		return m.AuthType()
	case emailprovider.FieldEmailAddr:
		return m.EmailAddr()
	case emailprovider.FieldPassword:
		return m.Password()
	case emailprovider.FieldHostName:
		return m.HostName()
	case emailprovider.FieldIdentify:
		return m.Identify()
	case emailprovider.FieldSecret:
		return m.Secret()
	case emailprovider.FieldPort:
		return m.Port()
	case emailprovider.FieldTLS:
		return m.TLS()
	case emailprovider.FieldIsDefault:
		return m.IsDefault()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmailProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emailprovider.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case emailprovider.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case emailprovider.FieldName:
		return m.OldName(ctx)
	case emailprovider.FieldAuthType:
		return m.OldAuthType(ctx)
	case emailprovider.FieldEmailAddr:
		return m.OldEmailAddr(ctx)
	case emailprovider.FieldPassword:
		return m.OldPassword(ctx)
	case emailprovider.FieldHostName:
		return m.OldHostName(ctx)
	case emailprovider.FieldIdentify:
		return m.OldIdentify(ctx)
	case emailprovider.FieldSecret:
		return m.OldSecret(ctx)
	case emailprovider.FieldPort:
		return m.OldPort(ctx)
	case emailprovider.FieldTLS:
		return m.OldTLS(ctx)
	case emailprovider.FieldIsDefault:
		return m.OldIsDefault(ctx)
	}
	return nil, fmt.Errorf("unknown EmailProvider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emailprovider.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case emailprovider.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case emailprovider.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case emailprovider.FieldAuthType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthType(v)
		return nil
	case emailprovider.FieldEmailAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailAddr(v)
		return nil
	case emailprovider.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case emailprovider.FieldHostName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostName(v)
		return nil
	case emailprovider.FieldIdentify:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentify(v)
		return nil
	case emailprovider.FieldSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecret(v)
		return nil
	case emailprovider.FieldPort:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case emailprovider.FieldTLS:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTLS(v)
		return nil
	case emailprovider.FieldIsDefault:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDefault(v)
		return nil
	}
	return fmt.Errorf("unknown EmailProvider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmailProviderMutation) AddedFields() []string {
	var fields []string
	if m.addauth_type != nil {
		fields = append(fields, emailprovider.FieldAuthType)
	}
	if m.addport != nil {
		fields = append(fields, emailprovider.FieldPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmailProviderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case emailprovider.FieldAuthType:
		return m.AddedAuthType()
	case emailprovider.FieldPort:
		return m.AddedPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case emailprovider.FieldAuthType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthType(v)
		return nil
	case emailprovider.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	}
	return fmt.Errorf("unknown EmailProvider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmailProviderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(emailprovider.FieldPassword) {
		fields = append(fields, emailprovider.FieldPassword)
	}
	if m.FieldCleared(emailprovider.FieldIdentify) {
		fields = append(fields, emailprovider.FieldIdentify)
	}
	if m.FieldCleared(emailprovider.FieldSecret) {
		fields = append(fields, emailprovider.FieldSecret)
	}
	if m.FieldCleared(emailprovider.FieldPort) {
		fields = append(fields, emailprovider.FieldPort)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmailProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmailProviderMutation) ClearField(name string) error {
	switch name {
	case emailprovider.FieldPassword:
		m.ClearPassword()
		return nil
	case emailprovider.FieldIdentify:
		m.ClearIdentify()
		return nil
	case emailprovider.FieldSecret:
		m.ClearSecret()
		return nil
	case emailprovider.FieldPort:
		m.ClearPort()
		return nil
	}
	return fmt.Errorf("unknown EmailProvider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmailProviderMutation) ResetField(name string) error {
	switch name {
	case emailprovider.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case emailprovider.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case emailprovider.FieldName:
		m.ResetName()
		return nil
	case emailprovider.FieldAuthType:
		m.ResetAuthType()
		return nil
	case emailprovider.FieldEmailAddr:
		m.ResetEmailAddr()
		return nil
	case emailprovider.FieldPassword:
		m.ResetPassword()
		return nil
	case emailprovider.FieldHostName:
		m.ResetHostName()
		return nil
	case emailprovider.FieldIdentify:
		m.ResetIdentify()
		return nil
	case emailprovider.FieldSecret:
		m.ResetSecret()
		return nil
	case emailprovider.FieldPort:
		m.ResetPort()
		return nil
	case emailprovider.FieldTLS:
		m.ResetTLS()
		return nil
	case emailprovider.FieldIsDefault:
		m.ResetIsDefault()
		return nil
	}
	return fmt.Errorf("unknown EmailProvider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmailProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmailProviderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmailProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmailProviderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmailProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmailProviderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmailProviderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EmailProvider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmailProviderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EmailProvider edge %s", name)
}

// SmsLogMutation represents an operation that mutates the SmsLog nodes in the graph.
type SmsLogMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *time.Time
	updated_at     *time.Time
	phone_number   *string
	content        *string
	send_status    *uint8
	addsend_status *int8
	provider       *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*SmsLog, error)
	predicates     []predicate.SmsLog
}

var _ ent.Mutation = (*SmsLogMutation)(nil)

// smslogOption allows management of the mutation configuration using functional options.
type smslogOption func(*SmsLogMutation)

// newSmsLogMutation creates new mutation for the SmsLog entity.
func newSmsLogMutation(c config, op Op, opts ...smslogOption) *SmsLogMutation {
	m := &SmsLogMutation{
		config:        c,
		op:            op,
		typ:           TypeSmsLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSmsLogID sets the ID field of the mutation.
func withSmsLogID(id uuid.UUID) smslogOption {
	return func(m *SmsLogMutation) {
		var (
			err   error
			once  sync.Once
			value *SmsLog
		)
		m.oldValue = func(ctx context.Context) (*SmsLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SmsLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSmsLog sets the old SmsLog of the mutation.
func withSmsLog(node *SmsLog) smslogOption {
	return func(m *SmsLogMutation) {
		m.oldValue = func(context.Context) (*SmsLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SmsLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SmsLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SmsLog entities.
func (m *SmsLogMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SmsLogMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SmsLogMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SmsLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SmsLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SmsLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SmsLog entity.
// If the SmsLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SmsLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SmsLogMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SmsLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SmsLog entity.
// If the SmsLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SmsLogMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPhoneNumber sets the "phone_number" field.
func (m *SmsLogMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *SmsLogMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the SmsLog entity.
// If the SmsLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsLogMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *SmsLogMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetContent sets the "content" field.
func (m *SmsLogMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *SmsLogMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the SmsLog entity.
// If the SmsLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsLogMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *SmsLogMutation) ResetContent() {
	m.content = nil
}

// SetSendStatus sets the "send_status" field.
func (m *SmsLogMutation) SetSendStatus(u uint8) {
	m.send_status = &u
	m.addsend_status = nil
}

// SendStatus returns the value of the "send_status" field in the mutation.
func (m *SmsLogMutation) SendStatus() (r uint8, exists bool) {
	v := m.send_status
	if v == nil {
		return
	}
	return *v, true
}

// OldSendStatus returns the old "send_status" field's value of the SmsLog entity.
// If the SmsLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsLogMutation) OldSendStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSendStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSendStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSendStatus: %w", err)
	}
	return oldValue.SendStatus, nil
}

// AddSendStatus adds u to the "send_status" field.
func (m *SmsLogMutation) AddSendStatus(u int8) {
	if m.addsend_status != nil {
		*m.addsend_status += u
	} else {
		m.addsend_status = &u
	}
}

// AddedSendStatus returns the value that was added to the "send_status" field in this mutation.
func (m *SmsLogMutation) AddedSendStatus() (r int8, exists bool) {
	v := m.addsend_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetSendStatus resets all changes to the "send_status" field.
func (m *SmsLogMutation) ResetSendStatus() {
	m.send_status = nil
	m.addsend_status = nil
}

// SetProvider sets the "provider" field.
func (m *SmsLogMutation) SetProvider(s string) {
	m.provider = &s
}

// Provider returns the value of the "provider" field in the mutation.
func (m *SmsLogMutation) Provider() (r string, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the SmsLog entity.
// If the SmsLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsLogMutation) OldProvider(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ResetProvider resets all changes to the "provider" field.
func (m *SmsLogMutation) ResetProvider() {
	m.provider = nil
}

// Where appends a list predicates to the SmsLogMutation builder.
func (m *SmsLogMutation) Where(ps ...predicate.SmsLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SmsLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SmsLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SmsLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SmsLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SmsLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SmsLog).
func (m *SmsLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SmsLogMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, smslog.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, smslog.FieldUpdatedAt)
	}
	if m.phone_number != nil {
		fields = append(fields, smslog.FieldPhoneNumber)
	}
	if m.content != nil {
		fields = append(fields, smslog.FieldContent)
	}
	if m.send_status != nil {
		fields = append(fields, smslog.FieldSendStatus)
	}
	if m.provider != nil {
		fields = append(fields, smslog.FieldProvider)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SmsLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case smslog.FieldCreatedAt:
		return m.CreatedAt()
	case smslog.FieldUpdatedAt:
		return m.UpdatedAt()
	case smslog.FieldPhoneNumber:
		return m.PhoneNumber()
	case smslog.FieldContent:
		return m.Content()
	case smslog.FieldSendStatus:
		return m.SendStatus()
	case smslog.FieldProvider:
		return m.Provider()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SmsLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case smslog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case smslog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case smslog.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case smslog.FieldContent:
		return m.OldContent(ctx)
	case smslog.FieldSendStatus:
		return m.OldSendStatus(ctx)
	case smslog.FieldProvider:
		return m.OldProvider(ctx)
	}
	return nil, fmt.Errorf("unknown SmsLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SmsLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case smslog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case smslog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case smslog.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case smslog.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case smslog.FieldSendStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSendStatus(v)
		return nil
	case smslog.FieldProvider:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	}
	return fmt.Errorf("unknown SmsLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SmsLogMutation) AddedFields() []string {
	var fields []string
	if m.addsend_status != nil {
		fields = append(fields, smslog.FieldSendStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SmsLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case smslog.FieldSendStatus:
		return m.AddedSendStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SmsLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case smslog.FieldSendStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSendStatus(v)
		return nil
	}
	return fmt.Errorf("unknown SmsLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SmsLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SmsLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SmsLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SmsLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SmsLogMutation) ResetField(name string) error {
	switch name {
	case smslog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case smslog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case smslog.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case smslog.FieldContent:
		m.ResetContent()
		return nil
	case smslog.FieldSendStatus:
		m.ResetSendStatus()
		return nil
	case smslog.FieldProvider:
		m.ResetProvider()
		return nil
	}
	return fmt.Errorf("unknown SmsLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SmsLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SmsLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SmsLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SmsLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SmsLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SmsLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SmsLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SmsLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SmsLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SmsLog edge %s", name)
}

// SmsProviderMutation represents an operation that mutates the SmsProvider nodes in the graph.
type SmsProviderMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	secret_id     *string
	secret_key    *string
	region        *string
	is_default    *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SmsProvider, error)
	predicates    []predicate.SmsProvider
}

var _ ent.Mutation = (*SmsProviderMutation)(nil)

// smsproviderOption allows management of the mutation configuration using functional options.
type smsproviderOption func(*SmsProviderMutation)

// newSmsProviderMutation creates new mutation for the SmsProvider entity.
func newSmsProviderMutation(c config, op Op, opts ...smsproviderOption) *SmsProviderMutation {
	m := &SmsProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeSmsProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSmsProviderID sets the ID field of the mutation.
func withSmsProviderID(id uint64) smsproviderOption {
	return func(m *SmsProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *SmsProvider
		)
		m.oldValue = func(ctx context.Context) (*SmsProvider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SmsProvider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSmsProvider sets the old SmsProvider of the mutation.
func withSmsProvider(node *SmsProvider) smsproviderOption {
	return func(m *SmsProviderMutation) {
		m.oldValue = func(context.Context) (*SmsProvider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SmsProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SmsProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SmsProvider entities.
func (m *SmsProviderMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SmsProviderMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SmsProviderMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SmsProvider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SmsProviderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SmsProviderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SmsProvider entity.
// If the SmsProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsProviderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SmsProviderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SmsProviderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SmsProviderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SmsProvider entity.
// If the SmsProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsProviderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SmsProviderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *SmsProviderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SmsProviderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SmsProvider entity.
// If the SmsProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsProviderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SmsProviderMutation) ResetName() {
	m.name = nil
}

// SetSecretID sets the "secret_id" field.
func (m *SmsProviderMutation) SetSecretID(s string) {
	m.secret_id = &s
}

// SecretID returns the value of the "secret_id" field in the mutation.
func (m *SmsProviderMutation) SecretID() (r string, exists bool) {
	v := m.secret_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSecretID returns the old "secret_id" field's value of the SmsProvider entity.
// If the SmsProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsProviderMutation) OldSecretID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecretID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecretID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecretID: %w", err)
	}
	return oldValue.SecretID, nil
}

// ResetSecretID resets all changes to the "secret_id" field.
func (m *SmsProviderMutation) ResetSecretID() {
	m.secret_id = nil
}

// SetSecretKey sets the "secret_key" field.
func (m *SmsProviderMutation) SetSecretKey(s string) {
	m.secret_key = &s
}

// SecretKey returns the value of the "secret_key" field in the mutation.
func (m *SmsProviderMutation) SecretKey() (r string, exists bool) {
	v := m.secret_key
	if v == nil {
		return
	}
	return *v, true
}

// OldSecretKey returns the old "secret_key" field's value of the SmsProvider entity.
// If the SmsProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsProviderMutation) OldSecretKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecretKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecretKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecretKey: %w", err)
	}
	return oldValue.SecretKey, nil
}

// ResetSecretKey resets all changes to the "secret_key" field.
func (m *SmsProviderMutation) ResetSecretKey() {
	m.secret_key = nil
}

// SetRegion sets the "region" field.
func (m *SmsProviderMutation) SetRegion(s string) {
	m.region = &s
}

// Region returns the value of the "region" field in the mutation.
func (m *SmsProviderMutation) Region() (r string, exists bool) {
	v := m.region
	if v == nil {
		return
	}
	return *v, true
}

// OldRegion returns the old "region" field's value of the SmsProvider entity.
// If the SmsProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsProviderMutation) OldRegion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegion: %w", err)
	}
	return oldValue.Region, nil
}

// ResetRegion resets all changes to the "region" field.
func (m *SmsProviderMutation) ResetRegion() {
	m.region = nil
}

// SetIsDefault sets the "is_default" field.
func (m *SmsProviderMutation) SetIsDefault(b bool) {
	m.is_default = &b
}

// IsDefault returns the value of the "is_default" field in the mutation.
func (m *SmsProviderMutation) IsDefault() (r bool, exists bool) {
	v := m.is_default
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDefault returns the old "is_default" field's value of the SmsProvider entity.
// If the SmsProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SmsProviderMutation) OldIsDefault(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDefault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDefault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDefault: %w", err)
	}
	return oldValue.IsDefault, nil
}

// ResetIsDefault resets all changes to the "is_default" field.
func (m *SmsProviderMutation) ResetIsDefault() {
	m.is_default = nil
}

// Where appends a list predicates to the SmsProviderMutation builder.
func (m *SmsProviderMutation) Where(ps ...predicate.SmsProvider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SmsProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SmsProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SmsProvider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SmsProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SmsProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SmsProvider).
func (m *SmsProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SmsProviderMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, smsprovider.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, smsprovider.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, smsprovider.FieldName)
	}
	if m.secret_id != nil {
		fields = append(fields, smsprovider.FieldSecretID)
	}
	if m.secret_key != nil {
		fields = append(fields, smsprovider.FieldSecretKey)
	}
	if m.region != nil {
		fields = append(fields, smsprovider.FieldRegion)
	}
	if m.is_default != nil {
		fields = append(fields, smsprovider.FieldIsDefault)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SmsProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case smsprovider.FieldCreatedAt:
		return m.CreatedAt()
	case smsprovider.FieldUpdatedAt:
		return m.UpdatedAt()
	case smsprovider.FieldName:
		return m.Name()
	case smsprovider.FieldSecretID:
		return m.SecretID()
	case smsprovider.FieldSecretKey:
		return m.SecretKey()
	case smsprovider.FieldRegion:
		return m.Region()
	case smsprovider.FieldIsDefault:
		return m.IsDefault()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SmsProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case smsprovider.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case smsprovider.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case smsprovider.FieldName:
		return m.OldName(ctx)
	case smsprovider.FieldSecretID:
		return m.OldSecretID(ctx)
	case smsprovider.FieldSecretKey:
		return m.OldSecretKey(ctx)
	case smsprovider.FieldRegion:
		return m.OldRegion(ctx)
	case smsprovider.FieldIsDefault:
		return m.OldIsDefault(ctx)
	}
	return nil, fmt.Errorf("unknown SmsProvider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SmsProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case smsprovider.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case smsprovider.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case smsprovider.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case smsprovider.FieldSecretID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecretID(v)
		return nil
	case smsprovider.FieldSecretKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecretKey(v)
		return nil
	case smsprovider.FieldRegion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegion(v)
		return nil
	case smsprovider.FieldIsDefault:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDefault(v)
		return nil
	}
	return fmt.Errorf("unknown SmsProvider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SmsProviderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SmsProviderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SmsProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SmsProvider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SmsProviderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SmsProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SmsProviderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SmsProvider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SmsProviderMutation) ResetField(name string) error {
	switch name {
	case smsprovider.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case smsprovider.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case smsprovider.FieldName:
		m.ResetName()
		return nil
	case smsprovider.FieldSecretID:
		m.ResetSecretID()
		return nil
	case smsprovider.FieldSecretKey:
		m.ResetSecretKey()
		return nil
	case smsprovider.FieldRegion:
		m.ResetRegion()
		return nil
	case smsprovider.FieldIsDefault:
		m.ResetIsDefault()
		return nil
	}
	return fmt.Errorf("unknown SmsProvider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SmsProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SmsProviderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SmsProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SmsProviderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SmsProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SmsProviderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SmsProviderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SmsProvider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SmsProviderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SmsProvider edge %s", name)
}
